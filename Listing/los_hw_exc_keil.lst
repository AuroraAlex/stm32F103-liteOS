


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------
    2 00000000         ; Copyright (c) <2013-2015>, <Huawei Technologies Co., L
                       td>
    3 00000000         ; All rights reserved.
    4 00000000         ; Redistribution and use in source and binary forms, wit
                       h or without modification,
    5 00000000         ; are permitted provided that the following conditions a
                       re met:
    6 00000000         ; 1. Redistributions of source code must retain the abov
                       e copyright notice, this list of
    7 00000000         ; conditions and the following disclaimer.
    8 00000000         ; 2. Redistributions in binary form must reproduce the a
                       bove copyright notice, this list
    9 00000000         ; of conditions and the following disclaimer in the docu
                       mentation and/or other materials
   10 00000000         ; provided with the distribution.
   11 00000000         ; 3. Neither the name of the copyright holder nor the na
                       mes of its contributors may be used
   12 00000000         ; to endorse or promote products derived from this softw
                       are without specific prior written
   13 00000000         ; permission.
   14 00000000         ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
                        CONTRIBUTORS
   15 00000000         ; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDI
                       NG, BUT NOT LIMITED TO,
   16 00000000         ; THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
                       FOR A PARTICULAR
   17 00000000         ; PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGH
                       T HOLDER OR
   18 00000000         ; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCID
                       ENTAL, SPECIAL,
   19 00000000         ; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NO
                       T LIMITED TO,
   20 00000000         ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF U
                       SE, DATA, OR PROFITS;
   21 00000000         ; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY TH
                       EORY OF LIABILITY,
   22 00000000         ; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUD
                       ING NEGLIGENCE OR
   23 00000000         ; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS S
                       OFTWARE, EVEN IF
   24 00000000         ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   25 00000000         ;-------------------------------------------------------
                       --------------------*/
   26 00000000         ;-------------------------------------------------------
                       ---------------------
   27 00000000         ; Notice of Export Control Law
   28 00000000         ; ===============================================
   29 00000000         ; Huawei LiteOS may be subject to applicable export cont
                       rol laws and regulations, which might
   30 00000000         ; include those applicable to Huawei LiteOS of U.S. and 
                       the country in which you are located.
   31 00000000         ; Import, export and usage of Huawei LiteOS in any manne
                       r by you shall be in compliance with such
   32 00000000         ; applicable export control laws and regulations.
   33 00000000         ;-------------------------------------------------------
                       --------------------*/
   34 00000000         



ARM Macro Assembler    Page 2 


   35 00000000         ;*******************************************************
                       *********************************
   36 00000000         ;                                  CODE GENERATION DIREC
                       TIVES
   37 00000000         ;*******************************************************
                       *********************************
   38 00000000         
   39 00000000                 PRESERVE8
   40 00000000                 AREA             |.text|, CODE, READONLY
   41 00000000                 THUMB
   42 00000000         
   43 00000000         ;*******************************************************
                       *********************************
   44 00000000         ;                                  EXPORT FUNCTIONS
   45 00000000         ;*******************************************************
                       *********************************
   46 00000000         
   47 00000000                 EXPORT           NMI_Handler
   48 00000000                 EXPORT           HardFault_Handler
   49 00000000                 EXPORT           MemManage_Handler
   50 00000000                 EXPORT           BusFault_Handler
   51 00000000                 EXPORT           UsageFault_Handler
   52 00000000                 EXPORT           SVC_Handler
   53 00000000         
   54 00000000         ;*******************************************************
                       *********************************
   55 00000000         ;                                  EXTERN PARAMETERS
   56 00000000         ;*******************************************************
                       *********************************
   57 00000000         
   58 00000000                 IMPORT           osExcHandleEntry
   59 00000000                 IMPORT           g_uwExcTbl
   60 00000000                 IMPORT           g_bTaskScheduled
   61 00000000         
   62 00000000         ;*******************************************************
                       *********************************
   63 00000000         ;                                  EQU
   64 00000000         ;*******************************************************
                       *********************************
   65 00000000         
   66 00000000 00000012 
                       OS_EXC_CAUSE_NMI
                               EQU              18
   67 00000000 00000013 
                       OS_EXC_CAUSE_HARDFAULT
                               EQU              19
   68 00000000 00000014 
                       OS_EXC_CAUSE_MEMFAULT
                               EQU              20
   69 00000000 00000015 
                       OS_EXC_CAUSE_BUSFAULT
                               EQU              21
   70 00000000 00000016 
                       OS_EXC_CAUSE_USAGEFAULT
                               EQU              22
   71 00000000 00000017 
                       OS_EXC_CAUSE_SVC
                               EQU              23
   72 00000000         



ARM Macro Assembler    Page 3 


   73 00000000 00000018 
                       HF_DEBUGEVT
                               EQU              24
   74 00000000 00000019 
                       HF_VECTBL
                               EQU              25
   75 00000000         
   76 00000000 00010000 
                       FLAG_ADDR_VALID
                               EQU              0x10000     ; bit 16
   77 00000000 00020000 
                       FLAG_HWI_ACTIVE
                               EQU              0x20000     ; bit 17
   78 00000000 10000000 
                       FLAG_NO_FLOAT
                               EQU              0x10000000  ; bit 28
   79 00000000         
   80 00000000 E000ED28 
                       OS_NVIC_CFSR
                               EQU              0xE000ED28  ; include BusFault/
                                                            MemFault/UsageFault
                                                             State Regeister
   81 00000000 E000ED2C 
                       OS_NVIC_HFSR
                               EQU              0xE000ED2C  ; HardFault State R
                                                            egeister
   82 00000000 E000ED38 
                       OS_NVIC_BFAR
                               EQU              0xE000ED38
   83 00000000 E000ED34 
                       OS_NVIC_MMFAR
                               EQU              0xE000ED34
   84 00000000 E000E300 
                       OS_NVIC_ACT_BASE
                               EQU              0xE000E300
   85 00000000 E000ED24 
                       OS_NVIC_SHCSRS
                               EQU              0xE000ED24
   86 00000000 00000C00 
                       OS_NVIC_SHCSR_MASK
                               EQU              0xC00       ; SYSTICKACT and PE
                                                            NDSVACT
   87 00000000         
   88 00000000         ;*******************************************************
                       *********************************
   89 00000000         ; Function:
   90 00000000         ;        VOID NMI_Handler(VOID);
   91 00000000         ; Description:
   92 00000000         ;        NMI Handler.
   93 00000000         ;*******************************************************
                       *********************************
   94 00000000         NMI_Handler
   95 00000000         ;/**
   96 00000000         ; * Before executing instruction 'B osExcDispatch', the 
                       value of R0 is as follows.
   97 00000000         ; * < R0 >:
   98 00000000         ; * +---------------------------------------------------
                       ---+------------------------+
   99 00000000         ; * |                          31-8                     



ARM Macro Assembler    Page 4 


                          |          7-0           |
  100 00000000         ; * +---------------------------------------------------
                       ---+------------------------+
  101 00000000         ; * |                          ---                      
                          |    OS_EXC_CAUSE_NMI    |
  102 00000000         ; * +---------------------------------------------------
                       ---+------------------------+
  103 00000000         ; * < R1 >: invalid
  104 00000000         ; */
  105 00000000 F04F 0012       MOV              R0, #OS_EXC_CAUSE_NMI
  106 00000004 F04F 0100       MOV              R1, #0
  107 00000008 E07D            B                osExcDispatch
  108 0000000A         
  109 0000000A         ;*******************************************************
                       *********************************
  110 0000000A         ; Function:
  111 0000000A         ;        VOID HardFault_Handler(VOID);
  112 0000000A         ; Description:
  113 0000000A         ;        HardFault Handler.
  114 0000000A         ;*******************************************************
                       *********************************
  115 0000000A         HardFault_Handler
  116 0000000A         ;/**
  117 0000000A         ; * Check HardFault state register.
  118 0000000A         ; *
  119 0000000A         ; * HFSR:
  120 0000000A         ; * +----------+--------+--------+--------+-------+
  121 0000000A         ; * |    31    |   30   | 29 - 2 |    1   |   0   |
  122 0000000A         ; * +----------+--------+--------+--------+-------+
  123 0000000A         ; * | DEBUGEVT | FORCED |   --   | VECTBL |   --  |
  124 0000000A         ; * +----------+--------+--------+--------+-------+
  125 0000000A         ; */
  126 0000000A F04F 0013       MOV              R0, #OS_EXC_CAUSE_HARDFAULT
  127 0000000E 4A5F            LDR              R2, =OS_NVIC_HFSR
  128 00000010 6812            LDR              R2, [R2]
  129 00000012         
  130 00000012         ;/**
  131 00000012         ; * Check whether HardFault are triggered by debugging e
                       vents.
  132 00000012         ; * Before executing instruction 'BNE osExcDispatch', th
                       e value of R0 is as follows.
  133 00000012         ; * < R0 >:
  134 00000012         ; * +----------------------------------------+----------
                       ---+------------------------+
  135 00000012         ; * |                 31-16                  |    15-8  
                          |          7-0           |
  136 00000012         ; * +----------------------------------------+----------
                       ---+------------------------+
  137 00000012         ; * |                  ---                   | HF_DEBUGE
                       VT | OS_EXC_CAUSE_HARDFAULT |
  138 00000012         ; * +----------------------------------------+----------
                       ---+------------------------+
  139 00000012         ; * < R1 >: invalid
  140 00000012         ; */
  141 00000012 F04F 0118       MOV              R1, #HF_DEBUGEVT
  142 00000016 EA40 2001       ORR              R0, R0, R1, LSL #0x8
  143 0000001A F012 4F00       TST              R2, #0x80000000
  144 0000001E D172            BNE              osExcDispatch ; DEBUGEVT
  145 00000020         



ARM Macro Assembler    Page 5 


  146 00000020         ;/**
  147 00000020         ; * Check whether HardFault is caused by the failure of 
                       the fetch vector.
  148 00000020         ; * Before executing instruction 'BNE osExcDispatch', th
                       e value of R0 is as follows.
  149 00000020         ; * < R0 >:
  150 00000020         ; * +----------------------------------------+----------
                       ---+------------------------+
  151 00000020         ; * |                 31-16                  |    15-8  
                          |          7-0           |
  152 00000020         ; * +----------------------------------------+----------
                       ---+------------------------+
  153 00000020         ; * |                  ---                   |  HF_VECTB
                       L  | OS_EXC_CAUSE_HARDFAULT |
  154 00000020         ; * +----------------------------------------+----------
                       ---+------------------------+
  155 00000020         ; * < R1 >: invalid
  156 00000020         ; */
  157 00000020 F000 00FF       AND              R0, R0, #0x000000FF
  158 00000024 F04F 0119       MOV              R1, #HF_VECTBL
  159 00000028 EA40 2001       ORR              R0, R0, R1, LSL #0x8
  160 0000002C F012 0F02       TST              R2, #0x00000002
  161 00000030 D169            BNE              osExcDispatch ; VECTBL
  162 00000032         
  163 00000032         ;/**
  164 00000032         ; * If it`s not DEBUGEVT and VECTBL, that is FORCED, the
                       n read the CFSR register to
  165 00000032         ; * check BusFault, MemFault and UsageFault.
  166 00000032         ; * R0: OS_EXC_CAUSE_HARDFAULT
  167 00000032         ; *
  168 00000032         ; * CFSR:
  169 00000032         ; * +----------------+--------+--------+
  170 00000032         ; * |      31-16     |  15-8  |  7-0   |
  171 00000032         ; * +----------------+--------+--------+
  172 00000032         ; * |      UFSR      |  BFSR  |  MFSR  |
  173 00000032         ; * +----------------+--------+--------+
  174 00000032         ; */
  175 00000032 F000 00FF       AND              R0, R0, #0x000000FF
  176 00000036         
  177 00000036 4A56            LDR              R2, =OS_NVIC_CFSR
  178 00000038 6812            LDR              R2, [R2]
  179 0000003A         
  180 0000003A F412 4F00       TST              R2, #0x8000 ; BFSR->BFARVALID
  181 0000003E D105            BNE              _HFBusFault ; BusFault
  182 00000040         
  183 00000040 F012 0F80       TST              R2, #0x80   ; MFSR->MMARVALID
  184 00000044 D107            BNE              _HFMemFault ; MemFault
  185 00000046         
  186 00000046         ;/**
  187 00000046         ; * BFARVALID and MMARVALID flag both invalid.
  188 00000046         ; * R12: 0 --- The error address is invalid.
  189 00000046         ; */
  190 00000046 F04F 0C00       MOV              R12, #0
  191 0000004A E008            B                osHFExcCommonBMU
  192 0000004C         
  193 0000004C         ;/**
  194 0000004C         ; * BFARVALID flag valid, read BFAR register.
  195 0000004C         ; * R1 : BFAR value --- The address value of a bus error
                       .



ARM Macro Assembler    Page 6 


  196 0000004C         ; * R12: The error address is valid.
  197 0000004C         ; */
  198 0000004C         _HFBusFault
  199 0000004C 4951            LDR              R1, =OS_NVIC_BFAR
  200 0000004E 6809            LDR              R1, [R1]
  201 00000050 F44F 3C80       MOV              R12, #FLAG_ADDR_VALID
  202 00000054 E003            B                osHFExcCommonBMU
  203 00000056         
  204 00000056         ;/**
  205 00000056         ; * MMARVALID flag valid, read MMFAR register.
  206 00000056         ; * R1 : MMFAR value --- The address value of memory man
                       agement error.
  207 00000056         ; * R12: The error address is valid.
  208 00000056         ; */
  209 00000056         _HFMemFault
  210 00000056 4950            LDR              R1, =OS_NVIC_MMFAR
  211 00000058 6809            LDR              R1, [R1]
  212 0000005A F44F 3C80       MOV              R12, #FLAG_ADDR_VALID
  213 0000005E         
  214 0000005E         ;/**
  215 0000005E         ; * osHFExcCommonBMU: --- Get specific error status from
                        table g_uwExcTbl, stored in R0.
  216 0000005E         ; * Before executing instruction 'B osExcDispatch', the 
                       value of R0 is as follows.
  217 0000005E         ; * < R0 >:
  218 0000005E         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  219 0000005E         ; * |       31-17       |        16       |        15-8 
                            |          7-0           |
  220 0000005E         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  221 0000005E         ; * |        ---        | FLAG_ADDR_VALID | Error state 
                       code | OS_EXC_CAUSE_HARDFAULT |
  222 0000005E         ; * |                   |        or       |       in    
                            |                        |
  223 0000005E         ; * |                   |   0(invalid)    | table g_uwEx
                       cTbl |                        |
  224 0000005E         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  225 0000005E         ; * < R1 >: The value of BFAR or MMFAR if the bit16(FLAG
                       _ADDR_VALID) of R0 is set to 1,
  226 0000005E         ; *         else invalid.
  227 0000005E         ; */
  228 0000005E         osHFExcCommonBMU
  229 0000005E FAB2 F282       CLZ              R2, R2
  230 00000062 4B4E            LDR              R3, =g_uwExcTbl
  231 00000064 4413            ADD              R3, R3, R2
  232 00000066 781A            LDRB             R2, [R3]
  233 00000068 EA40 2002       ORR              R0, R0, R2, LSL #0x8
  234 0000006C EA40 000C       ORR              R0, R0, R12
  235 00000070 E049            B                osExcDispatch
  236 00000072         
  237 00000072         ;*******************************************************
                       *********************************
  238 00000072         ; Function:
  239 00000072         ;        VOID SVC_Handler(VOID);
  240 00000072         ; Description:
  241 00000072         ;        SVC Handler.
  242 00000072         ;*******************************************************



ARM Macro Assembler    Page 7 


                       *********************************
  243 00000072         SVC_Handler
  244 00000072 F01E 0F04       TST              LR, #0x4    ; EXC_RETURN[b2] --
                                                            - PSP or MSP
  245 00000076 BF0C            ITE              EQ
  246 00000078 F3EF 8008       MRSEQ            R0, MSP
  247 0000007C F3EF 8009       MRSNE            R0, PSP
  248 00000080 6981            LDR              R1, [R0, #24] ; The PC value in
                                                             the stack frame
  249 00000082 F811 0C02       LDRB             R0, [R1, #-2] ; R0: The number 
                                                            of SVC (0 - 255)
  250 00000086 F04F 0100       MOV              R1, #0
  251 0000008A         ;B     osExcDispatch
  252 0000008A         _SvcLoop
  253 0000008A E7FE            B                _SvcLoop
  254 0000008C         
  255 0000008C         ;*******************************************************
                       *********************************
  256 0000008C         ; Function:
  257 0000008C         ;        VOID BusFault_Handler(VOID);
  258 0000008C         ; Description:
  259 0000008C         ;        BusFault Handler.
  260 0000008C         ;*******************************************************
                       *********************************
  261 0000008C         BusFault_Handler
  262 0000008C 4840            LDR              R0, =OS_NVIC_CFSR
  263 0000008E 6800            LDR              R0, [R0]
  264 00000090 F04F 0215       LDR              R2, =OS_EXC_CAUSE_BUSFAULT
  265 00000094         
  266 00000094 F410 4F00       TST              R0, #0x8000 ; BFSR->BFARVALID
  267 00000098 D006            BEQ              _ExcBusNoADDR
  268 0000009A         
  269 0000009A 493E            LDR              R1, =OS_NVIC_BFAR
  270 0000009C 6809            LDR              R1, [R1]    ; R1:  The value of
                                                             BFAR
  271 0000009E F44F 3C80       MOV              R12, #FLAG_ADDR_VALID ; R12: Bu
                                                            sFault addr valid
  272 000000A2 F400 507C       AND              R0, R0, #0x3F00 ; R0:  Reserved
                                                             the b13-b8 of the 
                                                            BFSR
  273 000000A6 E023            B                osExcCommonBMU
  274 000000A8         
  275 000000A8         _ExcBusNoADDR
  276 000000A8 F04F 0C00       MOV              R12, #0     ; R12: BusFault add
                                                            r invalid
  277 000000AC F400 507C       AND              R0, R0, #0x3F00 ; R0:  Reserved
                                                             the b13-b8 of the 
                                                            BFSR
  278 000000B0 E01E            B                osExcCommonBMU
  279 000000B2         
  280 000000B2         ;*******************************************************
                       *********************************
  281 000000B2         ; Function:
  282 000000B2         ;        VOID MemManage_Handler(VOID);
  283 000000B2         ; Description:
  284 000000B2         ;        MemManage Handler.
  285 000000B2         ;*******************************************************
                       *********************************
  286 000000B2         MemManage_Handler



ARM Macro Assembler    Page 8 


  287 000000B2 4837            LDR              R0, =OS_NVIC_CFSR
  288 000000B4 6800            LDR              R0, [R0]
  289 000000B6 F04F 0214       LDR              R2, =OS_EXC_CAUSE_MEMFAULT
  290 000000BA         
  291 000000BA F010 0F80       TST              R0, #0x80   ; MFSR->MMARVALID
  292 000000BE D006            BEQ              _ExcMemNoADDR
  293 000000C0         
  294 000000C0 4935            LDR              R1, =OS_NVIC_MMFAR
  295 000000C2 6809            LDR              R1, [R1]    ; R1:  The value of
                                                             MMFAR
  296 000000C4 F44F 3C80       MOV              R12, #FLAG_ADDR_VALID ; R12: Me
                                                            mFault addr valid
  297 000000C8 F000 003B       AND              R0, R0, #0x3B ; R0:  Reserved t
                                                            he b5-b0 of the MFS
                                                            R
  298 000000CC E010            B                osExcCommonBMU
  299 000000CE         
  300 000000CE         _ExcMemNoADDR
  301 000000CE F04F 0C00       MOV              R12, #0     ; R12: MemFault add
                                                            r invalid
  302 000000D2 F000 003B       AND              R0, R0, #0x3B ; R0:  Reserved t
                                                            he b5-b0 of the MFS
                                                            R
  303 000000D6 E00B            B                osExcCommonBMU
  304 000000D8         
  305 000000D8         ;*******************************************************
                       *********************************
  306 000000D8         ; Function:
  307 000000D8         ;        VOID UsageFault_Handler(VOID);
  308 000000D8         ; Description:
  309 000000D8         ;        UsageFault Handler.
  310 000000D8         ;*******************************************************
                       *********************************
  311 000000D8         UsageFault_Handler
  312 000000D8         
  313 000000D8 482D            LDR              R0, =OS_NVIC_CFSR
  314 000000DA 6800            LDR              R0, [R0]
  315 000000DC F04F 0216       LDR              R2, =OS_EXC_CAUSE_USAGEFAULT
  316 000000E0         
  317 000000E0 F240 310F       MOV              R1, #0x030F
  318 000000E4 EA4F 4101       LSL              R1, R1, #16
  319 000000E8 EA00 0001       AND              R0, R0, R1  ; R0:  reserved UFS
                                                            R
  320 000000EC F04F 0C00       MOV              R12, #0     ; R12: Fault addr i
                                                            nvalid
  321 000000F0         
  322 000000F0         
  323 000000F0         
  324 000000F0         ;/**
  325 000000F0         ; * osExcCommonBMU: BusFault_Handler,MemManage_Handler a
                       nd UsageFault_Handler share.
  326 000000F0         ; * Get specific error status from table g_uwExcTbl, sto
                       red in R0.
  327 000000F0         ; * Before executing osExcDispatch, the value of R0 is a
                       s follows.
  328 000000F0         ; * < R0 >:
  329 000000F0         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  330 000000F0         ; * |       31-17       |        16       |        15-8 



ARM Macro Assembler    Page 9 


                            |          7-0           |
  331 000000F0         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  332 000000F0         ; * |        ---        | FLAG_ADDR_VALID | Error state 
                       code |OS_EXC_CAUSE_BUSFAULT or|
  333 000000F0         ; * |                   |        or       |       in    
                            |OS_EXC_CAUSE_MEMFAULT or|
  334 000000F0         ; * |                   |   0(invalid)    | table g_uwEx
                       cTbl |OS_EXC_CAUSE_USAGEFAULT |
  335 000000F0         ; * +-------------------+-----------------+-------------
                       -----+------------------------+
  336 000000F0         ; * < R1 >: The value of BFAR or MMFAR if the bit16(FLAG
                       _ADDR_VALID) of R0 is set to 1,
  337 000000F0         ; *         else invalid.
  338 000000F0         ; */
  339 000000F0         osExcCommonBMU
  340 000000F0 FAB0 F080       CLZ              R0, R0
  341 000000F4 4B29            LDR              R3, =g_uwExcTbl
  342 000000F6 4403            ADD              R3, R3, R0
  343 000000F8 7818            LDRB             R0, [R3]
  344 000000FA EA4F 2000       LSL              R0, R0, #0x8
  345 000000FE EA40 0002       ORR              R0, R0, R2
  346 00000102 EA40 000C       ORR              R0, R0, R12
  347 00000106         
  348 00000106         ;MRS R2,PSP  ;PSP-->>37D8
  349 00000106         
  350 00000106         ;*******************************************************
                       *********************************
  351 00000106         ; osExcDispatch: NMI_Handler, HardFault_Handler, SVC_Han
                       dler, BusFault_Handler, MemManage_Handler,
  352 00000106         ;                  UsageFault_Handler sharing.
  353 00000106         ;*******************************************************
                       *********************************
  354 00000106         
  355 00000106         ;/**
  356 00000106         ; * When executing osExcDispatch, R0, R1 will be used.
  357 00000106         ; * The possible values of R0 and R1 are as follows.
  358 00000106         ; *
  359 00000106         ; * < R0 >:
  360 00000106         ; * +----------------+-----------------+----------------
                       -----+------------------------+
  361 00000106         ; * |     31-17      |        16       |         15-8   
                            |          7-0           |
  362 00000106         ; * +----------------+-----------------+----------------
                       -----+------------------------+
  363 00000106         ; * |                | FLAG_ADDR_VALID | Error state cod
                       e in | OS_EXC_CAUSE_HARDFAULT |
  364 00000106         ; * |      ---       |       or        | table g_uwExcTb
                       l    |or OS_EXC_CAUSE_MEMFAULT|
  365 00000106         ; * |                |   0(invalid)    | or      HF_DEBU
                       GEVT |or OS_EXC_CAUSE_BUSFAULT|
  366 00000106         ; * |                |                 | or      HF_VECT
                       BL   |or OS_EXC_CAUSE_NMI  or |
  367 00000106         ; * |                |                 |                
                            | OS_EXC_CAUSE_USAGEFAULT|
  368 00000106         ; * +----------------+-----------------+----------------
                       -----+------------------------+
  369 00000106         ; * b17: FLAG_HWI_ACTIVE
  370 00000106         ; * b28: FLAG_NO_FLOAT



ARM Macro Assembler    Page 10 


  371 00000106         ; * NOTE: b17 and b28 will be set later.
  372 00000106         ; *
  373 00000106         ; * < R1 >:
  374 00000106         ; * If the bit16 of R0 is 1, then R1 is the value of BFA
                       R or MMFAR, otherwise the
  375 00000106         ; * value in R1 is invalid.
  376 00000106         ; *
  377 00000106         ; */
  378 00000106         osExcDispatch
  379 00000106 4A26            LDR              R2, =OS_NVIC_ACT_BASE
  380 00000108 F04F 0C08       MOV              R12, #8     ; #8: externel inte
                                                            rrupt active check 
                                                            loop counter(#0 - #
                                                            239)
  381 0000010C         
  382 0000010C         
  383 0000010C         
  384 0000010C         _hwiActiveCheck
  385 0000010C 6813            LDR              R3, [R2]    ; R3 store the valu
                                                            e of externel inter
                                                            rupt active status
  386 0000010E 2B00            CMP              R3, #0
  387 00000110 D012            BEQ              _hwiActiveCheckNext
  388 00000112         
  389 00000112         ;/**
  390 00000112         ; * Exception occured in external interrupt.
  391 00000112         ; */
  392 00000112 F440 3000       ORR              R0, R0, #FLAG_HWI_ACTIVE ; R0[b
                                                            17] = 1, externel i
                                                            nterrupt active val
                                                            id    &&&&&&&&&&
  393 00000116 FA93 F2A3       RBIT             R2, R3      ; bit reversal
  394 0000011A FAB2 F282       CLZ              R2, R2
  395 0000011E F1CC 0C08       RSB              R12, R12, #8 ; R12 = 8 - R12
  396 00000122 EB02 124C       ADD              R2, R2, R12, LSL #5 ; R2: exter
                                                            nal interrupt numbe
                                                            r as uwPid
  397 00000126         
  398 00000126         ;/**
  399 00000126         ; * Interrupts and initialization phase always use MSP.
  400 00000126         ; */
  401 00000126         _ExcInMSP
  402 00000126         ;TST   LR, #0x10                    ; EXC_RETURN[b4] ---
                        FPU(0) or without FPU(1)
  403 00000126         ;BNE   _NoFloatInMsp
  404 00000126         
  405 00000126         ;/**
  406 00000126         ; * Before executing instruction 'B _handleEntry', MSP i
                       s as follows.
  407 00000126         ; * MSP:
  408 00000126         ; *                                                     
                                                High addr--->|
  409 00000126         ; * +---------------------------------------------------
                       -----------------------------+---------
  410 00000126         ; *                                 | R4-R11,PRIMASK,SAV
                       ED_SP | R0-R3,R12,LR,PC,xPSR |
  411 00000126         ; * +---------------------------------------------------
                       -----------------------------+---------
  412 00000126         ; *                          R13--->|          Initial R



ARM Macro Assembler    Page 11 


                       13--->|<---      #32     --->|<---SAVED_SP
  413 00000126         ; *                                                     
                             |   (CPU auto saved)   |
  414 00000126         ; *
  415 00000126         ; */
  416 00000126         _NoFloatInMsp
  417 00000126 AB08            ADD              R3, R13, #32 ; #32: skip [R0-R3
                                                            ,R12,LR,PC,xPSR]
  418 00000128 B408            PUSH             {R3}        ; push [SAVED_SP]: 
                                                            MSP+32 = Stack poin
                                                            ter in MSP before e
                                                            ntering the excepti
                                                            on
  419 0000012A F3EF 8C10       MRS              R12, PRIMASK
  420 0000012E E92D 1FF0       PUSH             {R4-R12}    ; push R4-R11,PRIMA
                                                            SK to MSP
  421 00000132         
  422 00000132 F040 5080       ORR              R0, R0, #FLAG_NO_FLOAT ; R0[b28
                                                            ] = 1, no FPU    &&
                                                            &&&&&&&&
  423 00000136 E023            B                _handleEntry
  424 00000138         
  425 00000138         _hwiActiveCheckNext
  426 00000138 F102 0204       ADD              R2, R2, #4  ; next NVIC ACT ADD
                                                            R
  427 0000013C F1BC 0C01       SUBS             R12, R12, #1
  428 00000140 D1E4            BNE              _hwiActiveCheck
  429 00000142         
  430 00000142         ;/**
  431 00000142         ; * Not in externel interrupt, check whether it is SysTi
                       ck or PendSV.
  432 00000142         ; */
  433 00000142         
  434 00000142 4A18            LDR              R2, =OS_NVIC_SHCSRS
  435 00000144 8812            LDRH             R2,[R2]
  436 00000146 F44F 6340       LDR              R3,=OS_NVIC_SHCSR_MASK
  437 0000014A EA02 0203       AND              R2, R2, R3
  438 0000014E 2A00            CMP              R2, #0
  439 00000150 D1E9            BNE              _ExcInMSP   ; SysTick or PendSV
                                                             active
  440 00000152         
  441 00000152         ;/**
  442 00000152         ; * Check whether an exception occurs during the initial
                       ization phase.
  443 00000152         ; * If g_bTaskScheduled == 0, it is in the initializatio
                       n phase.
  444 00000152         ; */
  445 00000152 4A15            LDR              R2, =g_bTaskScheduled
  446 00000154 6812            LDR              R2, [R2]
  447 00000156 F012 0F01       TST              R2, #1
  448 0000015A D0E4            BEQ              _ExcInMSP   ; initialization ph
                                                            ase use MSP
  449 0000015C         ;/**
  450 0000015C         ; * Before executing _handleEntry, MSP is as follows.
  451 0000015C         ; * MSP:
  452 0000015C         ; *                                                     
                                                High addr--->|
  453 0000015C         ; * +---------------------------------------------------
                       -----------------------------+---------



ARM Macro Assembler    Page 12 


  454 0000015C         ; *                                  | R4-R11,PRIMASK,TA
                       SK_SP | R0-R3,R12,LR,PC,xPSR |
  455 0000015C         ; * +---------------------------------------------------
                       -----------------------------+---------
  456 0000015C         ; *                           R13--->|                  
                             |<---      #32     --->|<---Initial R13
  457 0000015C         ; *                                                     
                             |  (copied from PSP)   |
  458 0000015C         ; *                                                     
                             |<---R2(no use)
  459 0000015C         ; *
  460 0000015C         ; * NOTE: stack frame: R0-R3,R12,LR,PC,xPSR.
  461 0000015C         ; */
  462 0000015C         _NoFloatInPsp
  463 0000015C 466A            MOV              R2, R13
  464 0000015E B088            SUB              R13, #32    ; #32: MSP reserved
                                                            , used to store sta
                                                            ck frame in PSP
  465 00000160         
  466 00000160 F3EF 8309       MRS              R3, PSP
  467 00000164 F103 0C20       ADD              R12, R3, #32 ; PSP+32 = Stack p
                                                            ointer of the task 
                                                            before entering the
                                                             exception
  468 00000168         
  469 00000168 F84D CD04       PUSH             {R12}       ; push task SP to M
                                                            SP
  470 0000016C F3EF 8C10       MRS              R12, PRIMASK
  471 00000170 E92D 1FF0       PUSH             {R4-R12}    ; push R4-R11,PRIMA
                                                            SK of the current r
                                                            unning task to MSP
  472 00000174         
  473 00000174         ;/* Copy stack frame from the stack of the current runni
                       ng task to MSP */
  474 00000174 E893 0FF0       LDMFD            R3, {R4-R11} ; restore stack fr
                                                            ame of PSP to R4-R1
                                                            1
  475 00000178 E922 0FF0       STMFD            R2!, {R4-R11} ; save stack fram
                                                            e to MSP
  476 0000017C         
  477 0000017C F040 5080       ORR              R0, R0, #FLAG_NO_FLOAT ; R0[b28
                                                            ] = 1, no FPU    &&
                                                            &&&&&&&&
  478 00000180         
  479 00000180         ;/**
  480 00000180         ; * _handleEntry: Call osExcHandleEntry
  481 00000180         ; * param1: R0 --- b28:    FLAG_NO_FLOAT.
  482 00000180         ; *                b17:    FLAG_HWI_ACTIVE.
  483 00000180         ; *                b16:    FLAG_ADDR_VALID.
  484 00000180         ; *                b15-b8: Error state code in table g_u
                       wExcTbl or HF_DEBUGEVT or HF_VECTBL.
  485 00000180         ; *                b7-b0:  OS_EXC_CAUSE_HARDFAULT or OS_
                       EXC_CAUSE_NMI or OS_EXC_CAUSE_MEMFAULT
  486 00000180         ; *                        or OS_EXC_CAUSE_BUSFAULT or O
                       S_EXC_CAUSE_USAGEFAULT.
  487 00000180         ; * param2: R1 --- The value of BFAR or MMFAR if R0[b16]
                        = 1, otherwise invalid.
  488 00000180         ; * param3: R2 --- external interrupt number(0-239) if R
                       0[b17] = 1, otherwise invalid.



ARM Macro Assembler    Page 13 


  489 00000180         ; * param4: R3 --- Point to the top of the stack(R4 or S
                       16) that the exception stack frame in MSP.
  490 00000180         ; */
  491 00000180         _handleEntry
  492 00000180 466B            MOV              R3, R13
  493 00000182 B672            CPSID            I
  494 00000184 B671            CPSID            F
  495 00000186 F7FF BFFE       B                osExcHandleEntry
  496 0000018A         
  497 0000018A BF00            NOP
  498 0000018C                 ALIGN
  499 0000018C                 END
              E000ED2C 
              E000ED28 
              E000ED38 
              E000ED34 
              00000000 
              E000E300 
              E000ED24 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\..\output\los_hw_exc_keil.d -o..\..\output\los_hw_exc_keil.o -I
.\RTE\_USART -IE:\keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IE:
\keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISI
ON_VERSION SETA 525" --predefine="STM32F10X_HD SETA 1" --list=..\..\listing\los
_hw_exc_keil.lst ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_hw_exc_k
eil.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 40 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      None
Comment: .text unused
BusFault_Handler 0000008C

Symbol: BusFault_Handler
   Definitions
      At line 261 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 50 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: BusFault_Handler used once
HardFault_Handler 0000000A

Symbol: HardFault_Handler
   Definitions
      At line 115 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 48 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: HardFault_Handler used once
MemManage_Handler 000000B2

Symbol: MemManage_Handler
   Definitions
      At line 286 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 49 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: MemManage_Handler used once
NMI_Handler 00000000

Symbol: NMI_Handler
   Definitions
      At line 94 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 47 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: NMI_Handler used once
SVC_Handler 00000072

Symbol: SVC_Handler
   Definitions
      At line 243 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 52 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: SVC_Handler used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

UsageFault_Handler 000000D8

Symbol: UsageFault_Handler
   Definitions
      At line 311 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 51 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
Comment: UsageFault_Handler used once
_ExcBusNoADDR 000000A8

Symbol: _ExcBusNoADDR
   Definitions
      At line 275 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 267 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _ExcBusNoADDR used once
_ExcInMSP 00000126

Symbol: _ExcInMSP
   Definitions
      At line 401 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 439 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 448 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

_ExcMemNoADDR 000000CE

Symbol: _ExcMemNoADDR
   Definitions
      At line 300 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 292 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _ExcMemNoADDR used once
_HFBusFault 0000004C

Symbol: _HFBusFault
   Definitions
      At line 198 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 181 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _HFBusFault used once
_HFMemFault 00000056

Symbol: _HFMemFault
   Definitions
      At line 209 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 184 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _HFMemFault used once
_NoFloatInMsp 00000126

Symbol: _NoFloatInMsp
   Definitions
      At line 416 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      None
Comment: _NoFloatInMsp unused
_NoFloatInPsp 0000015C

Symbol: _NoFloatInPsp
   Definitions
      At line 462 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      None
Comment: _NoFloatInPsp unused
_SvcLoop 0000008A

Symbol: _SvcLoop
   Definitions
      At line 252 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 253 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _SvcLoop used once
_handleEntry 00000180

Symbol: _handleEntry
   Definitions
      At line 491 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 423 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _handleEntry used once
_hwiActiveCheck 0000010C

Symbol: _hwiActiveCheck
   Definitions
      At line 384 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 428 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: _hwiActiveCheck used once
_hwiActiveCheckNext 00000138

Symbol: _hwiActiveCheckNext
   Definitions
      At line 425 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 387 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

_hw_exc_keil.S
Comment: _hwiActiveCheckNext used once
osExcCommonBMU 000000F0

Symbol: osExcCommonBMU
   Definitions
      At line 339 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 273 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 278 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 298 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 303 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

osExcDispatch 00000106

Symbol: osExcDispatch
   Definitions
      At line 378 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 107 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 144 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 161 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 235 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

osHFExcCommonBMU 0000005E

Symbol: osHFExcCommonBMU
   Definitions
      At line 228 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
   Uses
      At line 191 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 202 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FLAG_ADDR_VALID 00010000

Symbol: FLAG_ADDR_VALID
   Definitions
      At line 76 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 201 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 212 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 271 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 296 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

FLAG_HWI_ACTIVE 00020000

Symbol: FLAG_HWI_ACTIVE
   Definitions
      At line 77 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 392 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: FLAG_HWI_ACTIVE used once
FLAG_NO_FLOAT 10000000

Symbol: FLAG_NO_FLOAT
   Definitions
      At line 78 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 422 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 477 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

HF_DEBUGEVT 00000018

Symbol: HF_DEBUGEVT
   Definitions
      At line 73 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 141 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: HF_DEBUGEVT used once
HF_VECTBL 00000019

Symbol: HF_VECTBL
   Definitions
      At line 74 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 158 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: HF_VECTBL used once
OS_EXC_CAUSE_BUSFAULT 00000015



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: OS_EXC_CAUSE_BUSFAULT
   Definitions
      At line 69 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 264 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_EXC_CAUSE_BUSFAULT used once
OS_EXC_CAUSE_HARDFAULT 00000013

Symbol: OS_EXC_CAUSE_HARDFAULT
   Definitions
      At line 67 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 126 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_EXC_CAUSE_HARDFAULT used once
OS_EXC_CAUSE_MEMFAULT 00000014

Symbol: OS_EXC_CAUSE_MEMFAULT
   Definitions
      At line 68 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 289 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_EXC_CAUSE_MEMFAULT used once
OS_EXC_CAUSE_NMI 00000012

Symbol: OS_EXC_CAUSE_NMI
   Definitions
      At line 66 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 105 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_EXC_CAUSE_NMI used once
OS_EXC_CAUSE_SVC 00000017

Symbol: OS_EXC_CAUSE_SVC
   Definitions
      At line 71 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      None
Comment: OS_EXC_CAUSE_SVC unused
OS_EXC_CAUSE_USAGEFAULT 00000016

Symbol: OS_EXC_CAUSE_USAGEFAULT
   Definitions
      At line 70 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 315 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_EXC_CAUSE_USAGEFAULT used once
OS_NVIC_ACT_BASE E000E300



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: OS_NVIC_ACT_BASE
   Definitions
      At line 84 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 379 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_NVIC_ACT_BASE used once
OS_NVIC_BFAR E000ED38

Symbol: OS_NVIC_BFAR
   Definitions
      At line 82 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 199 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 269 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

OS_NVIC_CFSR E000ED28

Symbol: OS_NVIC_CFSR
   Definitions
      At line 80 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 177 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 262 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 287 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 313 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

OS_NVIC_HFSR E000ED2C

Symbol: OS_NVIC_HFSR
   Definitions
      At line 81 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 127 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_NVIC_HFSR used once
OS_NVIC_MMFAR E000ED34

Symbol: OS_NVIC_MMFAR
   Definitions
      At line 83 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 210 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 294 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

OS_NVIC_SHCSRS E000ED24

Symbol: OS_NVIC_SHCSRS
   Definitions
      At line 85 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 434 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_NVIC_SHCSRS used once
OS_NVIC_SHCSR_MASK 00000C00

Symbol: OS_NVIC_SHCSR_MASK
   Definitions
      At line 86 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 436 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: OS_NVIC_SHCSR_MASK used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

g_bTaskScheduled 00000000

Symbol: g_bTaskScheduled
   Definitions
      At line 60 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 445 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: g_bTaskScheduled used once
g_uwExcTbl 00000000

Symbol: g_uwExcTbl
   Definitions
      At line 59 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 230 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
      At line 341 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S

osExcHandleEntry 00000000

Symbol: osExcHandleEntry
   Definitions
      At line 58 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los_
hw_exc_keil.S
   Uses
      At line 495 in file ..\..\HUAWEI_LiteOS\arch\arm\arm-m\cortex-m3\keil\los
_hw_exc_keil.S
Comment: osExcHandleEntry used once
3 symbols
377 symbols in table
